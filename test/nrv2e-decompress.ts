import {And, Feature, Given, Scenario, Then, When} from './lib/steps.js'

import nrv2eDecompress from '../src/nrv2e-decompress.js'

Feature('Test nrv2eDecompress', () => {
  Scenario('Decompress file', () => {
    let b64Input: string
    let utf16Output: Buffer
    let b64Expected: string

    Given('binary input as Base64', () => {
      b64Input =
        'BgQAANtYAAJDAPkxAHwAQXIw7zcGNN4ANiox+w81HrUGOP8eUABSAEUA+1oAWQBEDv9OAFQAIABN3wAuClMAvlQPV/eKUhq9Wg5X7k58UtcWSVq9TF5J79pBZ+5PAEsG12bTSm5GVQBM/ntSAEH7L1dj+0MAS1vvMvovewo3Ut4wDi39HjEAN6Pbl0FNe3YgPt5Q3kv3IlSevVnX1z9FMmuCShL2WgBaG9umKADvSAApJnx75k+itwZMAEx9X0rvbkSOTXtOOF/DRy0WOW53fPYLFoMzLr0xAi3DGnevLQOCfJ/vQZ5TcBZrN0oa9k4AfA82Q4QaDzj3q8deN6sN7zIE/1x8lbMnQdwBQi5ZT86jL2tqNAr2MwAw34xSH+uPSVPYFxZThBMzON8AMJM5wQA3MwRcMX7bNcET2jInwyedE01HZ4dlM94qKy0DL38fNgAqeBszSxOvNIeKfHM7fCLxNQAwVkMtdzl7Xiw/YMyrFzxQACBWw+Hza7c3C93/NWuHg1OWRquPQ5KP02K9IBZT4QZC9oNZU7aXFiOX83U4ADJFC7ADhrNVCyOW8w9qMbEnZhdHbHxjdjIT7E4DW0M3OQuGaxYmCSSSSSr/'
    })

    And('binary output as Base64', () => {
      b64Expected =
        'WABYAEMAMQB8AEEAQQBBADAAMAAwADcAMAA0ADYAfAAxADQANgA1ADAANQA4AHwAUABSAEUAWgBZAEQARQBOAFQAIABNAC4AIABTAFQALgAgAFcAQQBSAFMAWgBBAFcAWQB8AEQAWgBJAEUATABOAEkAQwBBACAATQBPAEsATwBUANMAVwB8AFUATAAuACAAUgBBAEsATwBXAEkARQBDAEsAQQAgADIANQAvADIANwB8ADAAMgAtADUAMQA3ACAAVwBBAFIAUwBaAEEAVwBBAHwARABNAEkAIAAxAFAATgBLAHwAVABPAFkATwBUAEEAfABFADEAMgBKAHwAWgBaAEUAMQAyADAAKABIACkAfAB8AEMATwBSAE8ATABMAEEAfABKAFQARABLAE0AMgA4AEUAMQAwADAAMAA4ADkAMQAyADAAfAAyADAAMQAzAC0AMQAxAC0AMAA2AHwALQAtAC0AfABLAE8AVwBBAEwAUwBLAEkAIABKAEEATgB8AEoAQQBOAHwASwBPAFcAQQBMAFMASwBJAHwAfAA4ADIAMAA5ADEANwAxADEAMAAyADIAfAAwADIALQA1ADEANwB8AFcAQQBSAFMAWgBBAFcAQQB8AHwAVwBBAEEBQgBSAFoAWQBTAEsAQQB8ADIANAB8ADMAMAB8AEsATwBXAEEATABTAEsAQQAgAE0AQQBSAEkAQQB8AE0AQQBSAEkAQQB8AEsATwBXAEEATABTAEsAQQB8AHwAOAA4ADAAMwAwADkANwAxADAAMgAyAHwAMAAyAC0ANQAxADcAfABXAEEAUgBTAFoAQQBXAEEAfAB8AFcAQQBBAUIAUgBaAFkAUwBLAEEAfAAyADQAfAAzADAAfAAxADYANQA1AHwAMQA2ADUANQB8ADIANgA1ADUAfAAxADIAMAA1AHwATQAxAHwAZQAxADEAKgAyADAAMAAxAC8AMQAxADYAKgAwADEAOAAwACoAMAA0AHwAMgB8ADEAMAAwADAAfAA0ADUAMAB8AC0ALQAtAHwAMQAzADkAOAAsADAAMAB8ADcAMQAsADAAMAB8AFAAIAB8ADIAMAAwADUALQAwADcALQAwADEAfAA1AHwALQAtAC0AfABTAEEATQBPAEMASADTAEQAIABPAFMATwBCAE8AVwBZAHwALQAtAC0AfAAyADAAMAA1AHwALQAtAC0AfAA4ACwAOAAyAHwAQQBBAEEAMAAwADAAMAAwADAAMAB8ADAAMgA2ADUAMAAwADAAOAAwADAAMAAxADUAOAB8ADAAMwB8ADAAMgB8ADAAMAAwAHwAMgAwADAAMABOAE4ATgBOAE4ATgBOAE4AfAAwADAAOQAwADAAMgAwADAAMQB8AA=='
    })

    When('decompress function is called', () => {
      const binInput = Buffer.from(b64Input, 'base64')
      const outputLength = binInput.readUInt32LE(0)
      utf16Output = Buffer.alloc(outputLength)
      const compressedInput = binInput.slice(4)
      nrv2eDecompress(compressedInput, utf16Output, 8)
    })

    Then('output is correct', () => {
      utf16Output.should.deep.equal(Buffer.from(b64Expected, 'base64'))
    })
  })
})
